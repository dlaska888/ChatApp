services:
  chatapp:
    image: chatapp
    depends_on:
      - kafka
      - mongo
      - redis
    build:
      context: .
      dockerfile: ChatApp/Dockerfile
    ports:
      - '80:80'
      - '443:443'
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: "http://+:80;https://+:443"
      ASPNETCORE_Kestrel__Certificates__Default__Password: password
      ASPNETCORE_Kestrel__Certificates__Default__Path: /https/aspnetapp.pfx
    volumes:
      - ~/.aspnet/https:/https:ro
    networks:
      - api-network

  mongo:
    image: mongo:7.0.12
    container_name: mongo
    ports:
      - '27017:27017'
    restart: always
    environment:
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_ROOT_USERNAME: root
    volumes:
      - mongodata:/data/db
    networks:
      - api-network

  redis:
    image: redis:7.2.5-alpine
    ports:
      - '6379:6379'
    networks:
      - api-network
  
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.4
    depends_on:
      - kafka
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "22181:2181"
    networks:
      - kafka-network
  
  kafka:
    image: wurstmeister/kafka:latest
    ports:
      - "9092:9092"
    expose:
      - "9093"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "MessageNotifications:1:1"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - api-network
      - kafka-network

volumes:
  mongodata:

networks:
  api-network:
  kafka-network:

