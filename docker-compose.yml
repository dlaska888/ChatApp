services:
  chatapp:
    image: chatapp
    build:
      context: .
      dockerfile: ChatApp/Dockerfile
    ports:
      - '80:80'
      - '443:443'
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: "http://+:80;https://+:443"
      ASPNETCORE_Kestrel__Certificates__Default__Password: password
      ASPNETCORE_Kestrel__Certificates__Default__Path: /https/aspnetapp.pfx
    volumes:
      - ~/.aspnet/https:/https:ro
    networks:
      api-network:

  mongo:
    image: mongo:7.0.12
    container_name: mongo
    ports:
      - '27017:27017'
    restart: always
    environment:
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_ROOT_USERNAME: root
    volumes:
      - mongodata:/data/db
    networks:
      api-network:

  redis:
    image: redis:7.2.5-alpine
    ports:
      - '6379:6379'
    networks:
      - api-network
        
  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    ports:
      - "2181:2181"
    networks:
      - kafka-network

  kafka:
    image: wurstmeister/kafka:latest
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - kafka-network
      - api-network

volumes:
  mongodata:

networks:
  api-network:

